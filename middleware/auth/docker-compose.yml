# Docker Compose配置 - 认证中间件开发和测试环境
version: '3.8'

services:
  # 认证服务
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth-service
    image: auth-service:latest
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "8080:8080"  # 应用端口
      - "8090:8090"  # 健康检查和metrics端口
    environment:
      - ENV=production
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - REDIS_ADDR=redis:6379
      - LOG_LEVEL=info
      - PROMETHEUS_ENABLED=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./configs:/config:ro
      - auth-logs:/logs
    networks:
      - auth-network
    depends_on:
      - redis
      - jaeger
    healthcheck:
      test: ["CMD", "/auth-service", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    container_name: auth-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: auth-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./auth_alerts.yml:/etc/prometheus/auth_alerts.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - auth-network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:10.1.0
    container_name: auth-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana_dashboard.json:/var/lib/grafana/dashboards/auth-middleware.json:ro
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - auth-network
    depends_on:
      - prometheus

  # Jaeger分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: auth-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP接收器
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - auth-network

  # Elasticsearch (ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: auth-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=auth-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - auth-network

  # Logstash日志处理
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: auth-logstash
    restart: unless-stopped
    volumes:
      - ./configs/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - auth-logs:/logs:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
    networks:
      - auth-network
    depends_on:
      - elasticsearch

  # Kibana日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: auth-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    networks:
      - auth-network
    depends_on:
      - elasticsearch

  # Node Exporter (系统指标)
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: auth-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - auth-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  auth-logs:

networks:
  auth-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16