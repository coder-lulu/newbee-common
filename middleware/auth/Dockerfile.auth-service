# 认证中间件微服务Docker优化镜像
# 多阶段构建，减小镜像尺寸并提升安全性

# 第一阶段：构建阶段
FROM golang:1.21-alpine AS builder

# 设置环境变量
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64 \
    GO111MODULE=on

# 安装必要的工具
RUN apk add --no-cache git ca-certificates tzdata

# 创建非root用户
RUN adduser -D -g '' appuser

# 设置工作目录
WORKDIR /build

# 复制go.mod和go.sum，利用Docker层缓存
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# 复制源码
COPY . .

# 构建应用程序
RUN go build -ldflags='-w -s -extldflags "-static"' \
    -tags netgo \
    -installsuffix cgo \
    -o auth-service ./cmd/auth-service/

# 第二阶段：运行镜像
FROM scratch

# 从builder阶段复制必要文件
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /build/auth-service /auth-service

# 创建必要目录
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/auth-service", "healthcheck"]

# 暴露端口
EXPOSE 8080 8090

# 设置入口点
ENTRYPOINT ["/auth-service"]
CMD ["--config=/config/auth.yaml"]